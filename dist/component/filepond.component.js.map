{"version":3,"file":"filepond.component.js","sourceRoot":"","sources":["../../src/component/filepond.component.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Angular FilePond 1.0.2\n * Licensed under MIT, https://opensource.org/licenses/MIT\n * Please visit https://pqina.nl/filepond for details.\n */\nimport {\n    Component,\n    EventEmitter,\n    ViewEncapsulation,\n    ElementRef,\n    SimpleChanges,\n    NgZone\n} from '@angular/core';\n\nimport {\n    OptionTypes,\n    create,\n    supported,\n    registerPlugin as register\n} from 'filepond';\n\n// Do this once\nconst isSupported: boolean = supported();\n\n// Methods not made available to the component\nconst filteredComponentMethods: Array<string> = [\n    'setOptions',\n    'on',\n    'off',\n    'onOnce',\n    'appendTo',\n    'insertAfter',\n    'insertBefore',\n    'isAttachedTo',\n    'replaceElement',\n    'restoreElement',\n    'destroy'\n];\n\n// All the properties that can be bound\nconst inputs: Array<any> = [];\n\n// All the events that need to be mapped to emitters\nconst outputs: Array<any> = [];\n\nconst update = () => {\n    inputs.length = 0;\n    outputs.length = 0;\n    for (const prop in OptionTypes) {\n        // don't add events to the props array\n        if (/^on/.test(prop)) {\n            outputs.push(prop);\n            continue;\n        }\n\n        // get property type\n        inputs.push(prop);\n    }\n};\n\n// get initial inputs and outputs\nupdate();\n\nexport const registerPlugin = (...args: Array<any>) => {\n\n    // register plugin\n    register(...args);\n\n    // update props\n    update();\n};\n\n@Component({\n    selector: 'FilePond',\n    template: `\n      <div class=\"filepond--wrapper\">\n        <input type=\"file\" id={{id}} name={{name}} class={{className}} required={{required}} multiple={{allowMultiple}} accept={{acceptedFileTypes}}/>\n      </div>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    inputs,\n    outputs\n})\n\nexport class FilePond {\n\n    private _pond: any;\n    private _root: any;\n    private _element: any;\n    private _options: any;\n\n    constructor(_root: ElementRef, private _ngZone: NgZone) {\n        this._root = _root;\n\n        // init with empty options object\n        this._options = {};\n\n        // Programmatically create event emitters for output properties\n        outputs.forEach(output => {\n            this[output] = new EventEmitter();\n        });\n\n    }\n\n    ngAfterViewInit() {\n\n        this._element = this._root.nativeElement.querySelector('input');\n\n        // Map FilePond callback methods to Angular $emitters\n        const emitters = outputs.reduce((obj, output) => {\n            obj[output] = (...args: Array<any>) => {\n                this[output].emit(output, ...args);\n            };\n            return obj;\n        }, {});\n\n        // will block angular from listening to events inside the pond\n        this._ngZone.runOutsideAngular(() => {\n            this._pond = create(this._element, Object.assign(this._options, emitters));\n        });\n\n        // Copy instance method references to component instance\n        Object.keys(this._pond)\n            .filter(key => !filteredComponentMethods.includes(key))\n            .forEach(key => {\n                this[key] = this._pond[key];\n            });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const key in this) {\n            if (!inputs.includes(key)) { continue; }\n            this._options[key] = this[key];\n        }\n        if (!this._pond) {\n            return;\n        }\n        this._pond.setOptions(this._options);\n    }\n\n    ngOnDestroy() {\n        if (!this._pond) {\n            return;\n        }\n        this._pond.destroy();\n    }\n\n}"]}